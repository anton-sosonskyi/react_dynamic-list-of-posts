{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","utils/comments.tsx","components/Loader/Loader.tsx","components/CommentsList.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","utils/posts.tsx","components/UserSelector.tsx","App.tsx","utils/users.tsx","index.tsx"],"names":["PostsList","posts","selectedPostId","setSelectedPostId","className","map","post","id","title","type","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","sendComment","comment","Loader","CommentsList","isFormOpen","setIsFormOpen","comments","isError","isLoading","isProcessed","handleDelete","length","email","name","href","style","display","NewCommentForm","postId","addNewComment","isCommentSending","useState","setName","setEmail","text","setText","isSubmit","setIsSubmit","isNameError","setIsNameError","isEmailError","setIsEmailError","isTextError","setIsTextError","validateEmail","useCallback","emailInput","test","checkFormData","trim","handleClear","onSubmit","e","preventDefault","htmlFor","placeholder","classNames","value","onChange","currentTarget","PostDetails","selectedPost","setSelectedPost","setComments","setIsLoading","setIsProcessed","setIsError","setIsCommentSending","useEffect","loadPost","a","userId","loadComments","serverData","filter","serverResp","UserSelector","selectedUserId","users","setSelectedUserId","isShown","setIsShown","toggleDropDown","current","selectedUser","useMemo","find","user","role","event","handleClick","App","setUsers","setPosts","isLoadingPosts","setIsLoadingPosts","usersFromServer","validNames","catch","loadPosts","postFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a43f3427.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId: number,\n  setSelectedPostId: React.Dispatch<React.SetStateAction<number>>,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId,\n  setSelectedPostId,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr key={post.id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {selectedPostId !== post.id ? (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={() => setSelectedPostId(post.id)}\n                  >\n                    Open\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link\"\n                    onClick={() => setSelectedPostId(0)}\n                  >\n                    Close\n                  </button>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { client } from './fetchClient';\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const sendComment = (comment: Comment) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Comment } from '../types/Comment';\nimport { Loader } from './Loader';\n\ntype Props = {\n  comments: Comment[];\n  isFormOpen: boolean;\n  isLoading: boolean;\n  isProcessed: boolean;\n  isError: boolean;\n  setIsFormOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  handleDelete: (id: number) => Promise<void>;\n};\n\nexport const CommentsList: React.FC<Props> = ({\n  isFormOpen,\n  setIsFormOpen,\n  comments,\n  isError,\n  isLoading,\n  isProcessed,\n  handleDelete,\n}) => {\n  return (\n    <div className=\"block\">\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <>\n          {isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Failed to load comments!\n            </div>\n          )}\n\n          {!comments.length && isProcessed && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {comments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {comments.map((\n                {\n                  id,\n                  email,\n                  name,\n                  body,\n                },\n              ) => {\n                return (\n                  <article\n                    key={id}\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                  >\n                    <div className=\"message-header\">\n                      <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                        {name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => handleDelete(id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {body}\n                    </div>\n                  </article>\n                );\n              })}\n            </>\n          )}\n\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            style={isFormOpen ? { display: 'none' } : { display: 'block' }}\n            onClick={() => setIsFormOpen(true)}\n          >\n            Write a comment\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useCallback, useState } from 'react';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  postId: number;\n  addNewComment: (comment: Comment) => Promise<void>;\n  isCommentSending: boolean;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  addNewComment,\n  isCommentSending,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [text, setText] = useState('');\n  const [isSubmit, setIsSubmit] = useState(false);\n\n  const [isNameError, setIsNameError] = useState(false);\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [isTextError, setIsTextError] = useState(false);\n\n  const validateEmail = useCallback((emailInput: string) => {\n    const reg = /^[A-Za-z0-9_!#$%&'*+?`{|}~^.-]+@[A-Za-z0-9.-]+$/gm;\n\n    return reg.test(emailInput);\n  }, [email]);\n\n  const checkFormData = useCallback(() => {\n    if (!name.trim()) {\n      setName('');\n      setIsNameError(true);\n    }\n\n    if (!email.trim()) {\n      setEmail('');\n      setIsEmailError(true);\n    }\n\n    if (!text.trim()) {\n      setText('');\n      setIsTextError(true);\n    }\n  }, [name, email, text]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmit(true);\n    checkFormData();\n\n    if (!(name && validateEmail(email) && text.trim())) {\n      return;\n    }\n\n    const newComment: Comment = {\n      id: 0,\n      postId,\n      name,\n      email,\n      body: text,\n    };\n\n    addNewComment(newComment);\n    setText('');\n    setIsSubmit(false);\n  };\n\n  const handleClear = useCallback(() => {\n    setEmail('');\n    setName('');\n    setText('');\n    setIsEmailError(false);\n    setIsNameError(false);\n    setIsTextError(false);\n    setIsSubmit(false);\n  }, [isSubmit]);\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': isNameError },\n            )}\n            value={name}\n            onChange={(e) => {\n              setName(e.currentTarget.value);\n              setIsNameError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': isEmailError },\n            )}\n            value={email}\n            onChange={e => {\n              setEmail(e.currentTarget.value);\n              setIsEmailError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n        {(!validateEmail(email) && isSubmit) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Invalid email\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': isTextError },\n            )}\n            value={text}\n            onChange={e => {\n              setText(e.currentTarget.value);\n              setIsTextError(false);\n            }}\n          />\n        </div>\n\n        {isTextError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isCommentSending },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { deleteComment, getPostComments, sendComment } from '../utils/comments';\nimport { getPost } from '../utils/posts';\nimport { CommentsList } from './CommentsList';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPostId,\n}) => {\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isProcessed, setIsProcessed] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isCommentSending, setIsCommentSending] = useState(false);\n\n  useEffect(() => {\n    const loadPost = async () => {\n      try {\n        const {\n          id,\n          body,\n          title,\n          userId,\n        } = await getPost(selectedPostId);\n\n        setSelectedPost({\n          id,\n          body,\n          title,\n          userId,\n        });\n      } catch {\n        setIsError(true);\n      }\n    };\n\n    loadPost();\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    const loadComments = async () => {\n      setIsProcessed(false);\n      setIsLoading(true);\n      setIsError(false);\n      try {\n        const serverData = await getPostComments(selectedPostId);\n\n        setComments(serverData);\n      } catch {\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n        setIsProcessed(true);\n      }\n    };\n\n    loadComments();\n  }, [selectedPostId]);\n\n  const handleDelete = async (id: number) => {\n    setComments(comments.filter(comment => comment.id !== id));\n    try {\n      await deleteComment(id);\n    } catch {\n      setIsError(true);\n    }\n  };\n\n  const addNewComment = async (comment: Comment) => {\n    setIsCommentSending(true);\n    try {\n      const serverResp = await sendComment(comment);\n      const {\n        id,\n        email,\n        name,\n        body,\n      } = serverResp;\n\n      setComments([...comments,\n        {\n          id,\n          email,\n          name,\n          body,\n          postId: comment.postId,\n        },\n      ]);\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsCommentSending(false);\n    }\n  };\n\n  useEffect(() => {\n    setIsFormOpen(false);\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">\n          {`#${selectedPost?.id}: ${selectedPost?.title}`}\n        </h2>\n\n        <p data-cy=\"PostBody\">\n          {selectedPost?.body}\n        </p>\n      </div>\n\n      <CommentsList\n        isFormOpen={isFormOpen}\n        setIsFormOpen={setIsFormOpen}\n        comments={comments}\n        isLoading={isLoading}\n        isProcessed={isProcessed}\n        isError={isError}\n        handleDelete={handleDelete}\n      />\n\n      {isFormOpen && (\n        <NewCommentForm\n          postId={selectedPostId}\n          addNewComment={addNewComment}\n          isCommentSending={isCommentSending}\n        />\n      )}\n    </div>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from './fetchClient';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getPost = (postId: number) => {\n  return client.get<Post>(`/posts/${postId}`);\n};\n","import classNames from 'classnames';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[] | null,\n  selectedUserId: number,\n  setSelectedUserId: React.Dispatch<React.SetStateAction<number>>,\n  setSelectedPostId: React.Dispatch<React.SetStateAction<number>>,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  selectedUserId,\n  users,\n  setSelectedUserId,\n  setSelectedPostId,\n}) => {\n  const [isShown, setIsShown] = useState(false);\n\n  const toggleDropDown = useCallback(\n    () => setIsShown(current => !current), [isShown],\n  );\n\n  const handleClick = (event: React.MouseEvent, userId: number) => {\n    event.preventDefault();\n    setSelectedUserId(userId);\n    setSelectedPostId(0);\n    setIsShown(false);\n  };\n\n  const selectedUser = useMemo(\n    () => users?.find((user) => user.id === selectedUserId), [selectedUserId],\n  );\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={toggleDropDown}\n        >\n          {!selectedUser ? (\n            <span>Choose a user</span>\n          ) : (\n            <span>{selectedUser.name}</span>\n          )}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isShown && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users && users.map((user) => (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={classNames(\n                  'dropdown-item',\n                  { 'is-active': selectedUserId === user.id },\n                )}\n                onClick={(event) => {\n                  handleClick(event, user.id);\n                }}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getUsers } from './utils/users';\nimport { Post } from './types/Post';\nimport { getUserPosts } from './utils/posts';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[] | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [isError, setIsError] = useState(false);\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const [isProcessed, setIsProcessed] = useState(false);\n\n  useEffect(() => {\n    setIsError(false);\n\n    getUsers()\n      .then(usersFromServer => {\n        const validNames = usersFromServer\n          .filter(user => /\\b([A-ZÀ-ÿ][-,a-z. ']+[ ]*)+/gm.test(user.name));\n\n        setUsers(validNames);\n      })\n      .catch(() => setIsError(true));\n  }, []);\n\n  const loadPosts = async () => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoadingPosts(true);\n    setIsProcessed(false);\n\n    try {\n      const postFromServer = await getUserPosts(selectedUserId);\n\n      setPosts(postFromServer);\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoadingPosts(false);\n      setIsProcessed(true);\n    }\n  };\n\n  useEffect(() => {\n    loadPosts();\n  }, [selectedUserId]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUserId={selectedUserId}\n                  setSelectedUserId={setSelectedUserId}\n                  setSelectedPostId={setSelectedPostId}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUserId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoadingPosts && (\n                  <Loader />\n                )}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Unable to load posts!\n                  </div>\n                )}\n\n                {posts.length > 0 && !isLoadingPosts && (\n                  <PostsList\n                    posts={posts}\n                    selectedPostId={selectedPostId}\n                    setSelectedPostId={setSelectedPostId}\n                  />\n                )}\n\n                {!posts.length && isProcessed && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPostId },\n            )}\n          >\n            {selectedPostId && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPostId={selectedPostId}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from './fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}